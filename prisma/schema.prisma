generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Tenants Table
model Tenant {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    users     User[]
}

// Users Table
model User {
    id        String   @id @default(uuid())
    tenantId  Int?
    tenant    Tenant?  @relation(fields: [tenantId], references: [id])
    clerkId   String   @unique
    role      String   @default("user")
    firstName String
    lastName  String
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

// Customers Table
model Customer {
    id       Int       @id @default(autoincrement())
    name     String    @db.VarChar(100)
    email    String    @db.VarChar(100)
    phone    String    @db.VarChar(15)
    address  String    @db.VarChar(255)
    invoices Invoice[]
}

// Products Table
model Product {
    id             Int             @id @default(autoincrement())
    name           String          @db.VarChar(100)
    description    String?
    price          Decimal         @db.Decimal(10, 2)
    invoiceDetails InvoiceDetail[]
}

// Discounts Table
model Discount {
    id             Int             @id @default(autoincrement())
    name           String          @db.VarChar(50)
    discountValue  Decimal         @db.Decimal(5, 2)
    invoiceDetails InvoiceDetail[]
}

// TaxRates Table
model TaxRate {
    id             Int             @id @default(autoincrement())
    name           String          @db.VarChar(50)
    rate           Decimal         @db.Decimal(5, 2)
    invoiceDetails InvoiceDetail[]
}

// Invoice Details Table (Join Table)
model InvoiceDetail {
    id         Int     @id @default(autoincrement())
    invoiceId  Int
    productId  Int
    quantity   Int
    taxId      Int?
    discountId Int?
    lineTotal  Decimal @db.Decimal(10, 2)

    invoice  Invoice   @relation(fields: [invoiceId], references: [id])
    product  Product   @relation(fields: [productId], references: [id])
    taxRate  TaxRate?  @relation(fields: [taxId], references: [id])
    discount Discount? @relation(fields: [discountId], references: [id])
}

// Invoices Table
model Invoice {
    id          Int      @id @default(autoincrement())
    customerId  Int
    invoiceDate DateTime
    dueDate     DateTime
    totalAmount Int

    customer        Customer         @relation(fields: [customerId], references: [id])
    invoiceDetails  InvoiceDetail[]
    shippingDetails ShippingDetail[]
    payments        Payment[]
}

// Payments Table
model Payment {
    id        Int      @id @default(autoincrement())
    invoiceId Int
    amount    Decimal  @db.Decimal(10, 2)
    date      DateTime
    method    String   @db.VarChar(50)
    status    String   @db.VarChar(50)
    reference String?  @db.VarChar(255)

    invoice Invoice @relation(fields: [invoiceId], references: [id])
}

// Shipping Details Table
model ShippingDetail {
    id               Int      @id @default(autoincrement())
    invoiceId        Int
    address          String   @db.VarChar(255)
    shippingDate     DateTime
    estimatedArrival DateTime

    invoice Invoice @relation(fields: [invoiceId], references: [id])
}

// Payment Methods Table
model PaymentMethod {
    id          Int     @id @default(autoincrement())
    name        String  @db.VarChar(50)
    description String?
}

// Payment Status Table
model PaymentStatus {
    id          Int     @id @default(autoincrement())
    name        String  @db.VarChar(50)
    description String?
}

// Bank Details Table
model BankDetail {
    id            Int    @id @default(autoincrement())
    bankName      String @db.VarChar(100)
    accountNumber String @db.VarChar(50)
    iban          String @db.VarChar(50)
    bic           String @db.VarChar(50)
}

// Payment Logs Table
model PaymentLog {
    id         Int      @id @default(autoincrement())
    timestamp  DateTime @default(now())
    logMessage String   @db.VarChar(255)
}
